{"version":3,"file":"index.js","mappings":"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","sources":["webpack://coaching-management-app/./src/config/config.js","webpack://coaching-management-app/./src/config/db.config.js","webpack://coaching-management-app/./src/config/logger.config.js","webpack://coaching-management-app/./src/controllers/adminController.js","webpack://coaching-management-app/./src/controllers/bookingController.js","webpack://coaching-management-app/./src/controllers/categoryController.js","webpack://coaching-management-app/./src/controllers/classScheduleController.js","webpack://coaching-management-app/./src/controllers/courseController.js","webpack://coaching-management-app/./src/controllers/coursePurchaseController.js","webpack://coaching-management-app/./src/controllers/dashboard.js","webpack://coaching-management-app/./src/controllers/productController.js","webpack://coaching-management-app/./src/controllers/superdealController.js","webpack://coaching-management-app/./src/controllers/teacherController.js","webpack://coaching-management-app/./src/controllers/userController.js","webpack://coaching-management-app/./src/errors/base.error.js","webpack://coaching-management-app/./src/middlewares/auth.js","webpack://coaching-management-app/./src/models/adminModel.js","webpack://coaching-management-app/./src/models/bannerImageModel.js","webpack://coaching-management-app/./src/models/bookingModel.js","webpack://coaching-management-app/./src/models/categoryModel.js","webpack://coaching-management-app/./src/models/classScheduleModel.js","webpack://coaching-management-app/./src/models/courseModel.js","webpack://coaching-management-app/./src/models/coursePurchaseModel.js","webpack://coaching-management-app/./src/models/deleteUserModel.js","webpack://coaching-management-app/./src/models/productModel.js","webpack://coaching-management-app/./src/models/superDealModel.js","webpack://coaching-management-app/./src/models/teacherModel.js","webpack://coaching-management-app/./src/models/userModel.js","webpack://coaching-management-app/./src/routes/v1/adminRoutes.js","webpack://coaching-management-app/./src/routes/v1/bookingRoutes.js","webpack://coaching-management-app/./src/routes/v1/categoryRoutes.js","webpack://coaching-management-app/./src/routes/v1/courseRoutes.js","webpack://coaching-management-app/./src/routes/v1/dashboardRoutes.js","webpack://coaching-management-app/./src/routes/v1/productRoutes.js","webpack://coaching-management-app/./src/routes/v1/purchaseRoutes.js","webpack://coaching-management-app/./src/routes/v1/scheduleRoutes.js","webpack://coaching-management-app/./src/routes/v1/superdealRoutes.js","webpack://coaching-management-app/./src/routes/v1/teacherRoutes.js","webpack://coaching-management-app/./src/routes/v1/userRoutes.js","webpack://coaching-management-app/./src/uitls/errorHandler.js","webpack://coaching-management-app/./src/uitls/utils.js","webpack://coaching-management-app/external commonjs \"bcrypt\"","webpack://coaching-management-app/external commonjs \"body-parser\"","webpack://coaching-management-app/external commonjs \"compression\"","webpack://coaching-management-app/external commonjs \"cors\"","webpack://coaching-management-app/external commonjs \"dotenv\"","webpack://coaching-management-app/external commonjs \"express\"","webpack://coaching-management-app/external commonjs \"express-fileupload\"","webpack://coaching-management-app/external commonjs \"express-mongo-sanitize\"","webpack://coaching-management-app/external commonjs \"helmet\"","webpack://coaching-management-app/external commonjs \"hpp\"","webpack://coaching-management-app/external commonjs \"http-status-codes\"","webpack://coaching-management-app/external commonjs \"jsonwebtoken\"","webpack://coaching-management-app/external commonjs \"mongoose\"","webpack://coaching-management-app/external commonjs \"uuid\"","webpack://coaching-management-app/external commonjs \"winston\"","webpack://coaching-management-app/external commonjs \"winston-mongodb\"","webpack://coaching-management-app/external node-commonjs \"fs\"","webpack://coaching-management-app/external node-commonjs \"os\"","webpack://coaching-management-app/external node-commonjs \"path\"","webpack://coaching-management-app/webpack/bootstrap","webpack://coaching-management-app/./index.js"],"sourcesContent":["const dotenv = require('dotenv');\r\n\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n    mongoDbUrl: process.env.MONGO_DB_URL,\r\n    logDbUrl: process.env.LOG_DB_URL,\r\n    tokenSecretKey: process.env.JWT_SECRET,\r\n    port: process.env.PORT,\r\n    adminSecretKey: process.env.ADMIN_SECRET_KEY\r\n};","const mongoose = require('mongoose');\r\nconst { mongoDbUrl } = require('./config');\r\n\r\nconst options = {\r\n  maxPoolSize: 4, // Adjust the pool size as needed\r\n};\r\n\r\nmongoose.connect(mongoDbUrl, options);\r\n\r\nconst connectToDatabase = mongoose.connection;\r\nconnectToDatabase.on('error', console.error.bind(console, 'connection error:'));\r\nconnectToDatabase.once('open', () => {\r\n  console.log('Databse connected');\r\n});\r\n\r\nmodule.exports = connectToDatabase;\r\n","const winston = require('winston');\r\nrequire('winston-mongodb');\r\n// const { mongoDbUrl } = require('./config');\r\n\r\nconst allowedTransports = [];\r\n\r\n// // The below transport config enables logging on the console\r\n// allowedTransports.push(new winston.transports.Console({\r\n//     format: winston.format.combine(\r\n//         winston.format.colorize(),\r\n//         winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss'}),\r\n//         winston.format.printf((log) => `${log.timestamp} [${log.level}]: [${log.message}] ${log.meta ? JSON.stringify(log.meta) : ''}`)\r\n//     )\r\n// }));\r\n\r\n// MongoDB transport\r\n// allowedTransports.push(new winston.transports.MongoDB({\r\n//     level: 'error',\r\n//     db: mongoDbUrl,\r\n//     collection: 'logs',\r\n//     format: winston.format.combine(\r\n//         winston.format.timestamp(),\r\n//         winston.format.json(),\r\n//         winston.format((info) => {\r\n//             info.meta = info.meta || {};\r\n//             return info;\r\n//         })()\r\n//     ),\r\n//     options: {\r\n//         useUnifiedTopology: true\r\n//     }\r\n// }));\r\n\r\n// The below transport config enables logging in a file\r\nallowedTransports.push(new winston.transports.File({\r\n    filename: 'app.log'\r\n}));\r\n\r\nconst logger = winston.createLogger({\r\n    format: winston.format.combine(\r\n        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n        winston.format.printf((log) => `${log.timestamp} [${log.level.toUpperCase()}]: ${log.message} ${log.meta? JSON.stringify(log.meta) : ''}`)\r\n    ),\r\n    transports: allowedTransports,\r\n    defaultMeta: { service: 'user-service' }\r\n});\r\n\r\n\r\nmodule.exports = logger;","const adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port, tokenSecretKey } = require(\"../config/config\");\r\nconst userModel = require(\"../models/userModel\");\r\nconst bookingModel = require(\"../models/bookingModel\");\r\n\r\n// ADD ADMIN\r\nconst createAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, password, mobile } = req.body;\r\n\r\n        if (!name || !email || !password || !mobile) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let { profilePic } = req.files;\r\n\r\n        if (!profilePic) {\r\n            return res.status(400).send({ status: false, message: \"No profile pic uploaded\" });\r\n        };\r\n\r\n        let hashedPassward = await bcrypt.hash(password, 10);\r\n        password = hashedPassward;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let profilePicPath = \"/adminImages/\";\r\n        let profilePicName = uuid.v4() + \".\" + profilePic.name.split(\".\").pop();\r\n        let profilePicFullPath = `http://${currentIpAddress}:${port}${profilePicPath}`;\r\n\r\n        let picSavingPath = path.join(__dirname, \"..\", \"..\", \"adminImages\", profilePicName);\r\n\r\n        profilePic.mv(picSavingPath, (err) => {\r\n            if (err) {\r\n                console.log(err);\r\n            }\r\n        });\r\n\r\n        picObj = {\r\n            picName: profilePicName,\r\n            picPath: profilePicFullPath,\r\n        };\r\n\r\n        let adminObj = {\r\n            adminId: generateRandomAlphaNumericID(26),\r\n            sessionToken: generateRandomAlphaNumericID(51),\r\n            name,\r\n            email,\r\n            password,\r\n            mobile,\r\n            profilePic: picObj,\r\n        };\r\n\r\n        let newAdmin = await adminModel.create(adminObj);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Admin created\",\r\n            data: newAdmin,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// ADMIN LOGIN\r\nconst adminLogin = async (req, res) => {\r\n    try {\r\n        let { email, password } = req.body;\r\n\r\n        if (!email || !password) {\r\n            return res.status(400).send({ status: false, message: \"Email and password are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ email });\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        bcrypt.compare(password, admin.password, function (err, result) {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        async function hasAccess(result) {\r\n            if (result) {\r\n                let data = {};\r\n                let date = Date.now();\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        email: admin.email,\r\n                        adminId: admin._id.toString(),\r\n                        iat: issueTime,\r\n                    },\r\n                    tokenSecretKey,\r\n                    { expiresIn: \"24h\" }\r\n                );\r\n                (data._id = admin._id.toString()), (data.email = email);\r\n                data.token = token;\r\n\r\n                res.setHeader(\"Authorization\", \"Bearer\", token);\r\n\r\n                admin.sessionToken = generateRandomAlphaNumericID(51);\r\n\r\n                await admin.save();\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Successfully login\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Login denied\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS OF AN USER\r\nconst getAllBookingsOfUser = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, userId } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let user = await userModel.findOne({ userId });\r\n\r\n            if (!user) {\r\n                return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n            }\r\n\r\n            let userAllBookings = await bookingModel.find({ userId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: userAllBookings,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE DAY REQUESTS\r\nconst getOneDayBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let date;\r\n            if (req.params.date) {\r\n                date = req.params.date;\r\n            } else {\r\n                let today = new Date(); // Use today's date if no date is provided\r\n                const year = today.getFullYear();\r\n                const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(today.getDate()).padStart(2, \"0\");\r\n\r\n                date = `${year}-${month}-${day}`;\r\n            }\r\n\r\n            let oneDayBookings = await bookingModel.find({ BookingDate: date });\r\n\r\n            let grandTotal = 0;\r\n            for (let booking of oneDayBookings) {\r\n                grandTotal += booking.grand_total;\r\n            };\r\n\r\n            let data = {\r\n                totalBookings: oneDayBookings,\r\n                oneDayRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE WEEK REQUESTS\r\nconst getOneWeekBookings = async (req, res) => {\r\n    try {\r\n        let { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let startDate;\r\n            let endDate;\r\n\r\n            if (req.params.startDate && req.params.endDate) {\r\n                startDate = req.params.startDate;\r\n                endDate = req.params.endDate;\r\n            } else {\r\n                const date = new Date();\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n                endDate = `${year}-${month}-${day}`;\r\n\r\n                const oneWeekAgo = new Date(date.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n                const startYear = oneWeekAgo.getFullYear();\r\n                const startMonth = String(oneWeekAgo.getMonth() + 1).padStart(2, '0');\r\n                const startDay = String(oneWeekAgo.getDate()).padStart(2, '0');\r\n\r\n                startDate = `${startYear}-${startMonth}-${startDay}`;\r\n            };\r\n\r\n            let oneWeekBookings = await bookingModel.find({\r\n                BookingDate: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneWeekBookings.length) {\r\n                for (let booking of oneWeekBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneWeekBookings: oneWeekBookings,\r\n                grandTotal: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE MONTH REVENUE AND REQUESTS (ADMIN API)\r\nconst getOneMonthBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, month, year } = req.params;\r\n\r\n        if (!adminId || !sessionToken || !month || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-${month}-01`; // Month is zero-based index\r\n            const endDate = `${year}-${month}-31`;\r\n\r\n            const oneMonthBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n\r\n            if (oneMonthBookings.length) {\r\n                for (let booking of oneMonthBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneMonthBookings: oneMonthBookings,\r\n                oneMonthRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE YEAR REQUESTS AND REVENUE (ADMIN API);\r\nconst getOneYearBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, year } = req.params;\r\n        if (!adminId || !sessionToken || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-01-01`; // January 1st of the provided year\r\n            const endDate = `${year}-12-31`; // December 31st of the provided year\r\n\r\n            let oneYearBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneYearBookings.length) {\r\n                for (let booking of oneYearBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneYearRequests: oneYearBookings,\r\n                oneYearRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createAdmin,\r\n    adminLogin,\r\n    getAllBookingsOfUser,\r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n};\r\n","const { isValidObjectId } = require(\"mongoose\");\r\nconst bookingModel = require(\"../models/bookingModel\");\r\nconst userModel = require(\"../models/userModel\");\r\nconst { adminSecretKey } = require(\"../config/config\");\r\n\r\n// CREATE BOOKING\r\nconst createBooking = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\" });\r\n        }\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n        }\r\n\r\n        let {\r\n            f_name,\r\n            l_name,\r\n            email,\r\n            mobile,\r\n            address,\r\n            apartment,\r\n            city,\r\n            state,\r\n            state_code,\r\n            countryCode,\r\n            countryName,\r\n            post_code,\r\n            productList,\r\n            CGST,\r\n            SGST,\r\n            grand_total,\r\n            BookingDate,\r\n            TimeSlot,\r\n            booking_status,\r\n            totalProduct,\r\n            total,\r\n        } = req.body;\r\n\r\n        let products = [];\r\n\r\n        for (let productData of productList) {\r\n            let { \r\n                name, \r\n                subTitle, \r\n                bookingQty, \r\n                category, \r\n                description, \r\n                discount, \r\n                imgUrl, \r\n                price, \r\n                status, \r\n                stock_items, \r\n                subTotal \r\n            } = productData;\r\n\r\n            products.push({\r\n                name,\r\n                subTitle,\r\n                bookingQty,\r\n                category,\r\n                description,\r\n                discount,\r\n                imgUrl,\r\n                price,\r\n                status,\r\n                stock_items,\r\n                subTotal,\r\n            });\r\n        }\r\n\r\n        let str = \"AP\";\r\n        let randomId;\r\n        let bookingId;\r\n        let isBookingAlreadyExist\r\n\r\n        do {\r\n            randomId = Math.floor(100000 + Math.random() * 899999);\r\n            bookingId = str + randomId;\r\n            isBookingAlreadyExist = await bookingModel.findOne({ bookingId: bookingId });\r\n        } while (isBookingAlreadyExist);\r\n        \r\n        let bookingObj = {\r\n            userId,\r\n            bookingId: bookingId,\r\n            f_name,\r\n            l_name,\r\n            email,\r\n            mobile,\r\n            address,\r\n            apartment,\r\n            city,\r\n            state,\r\n            state_code,\r\n            countryCode,\r\n            countryName,\r\n            post_code,\r\n            productList,\r\n            CGST,\r\n            SGST,\r\n            grand_total,\r\n            BookingDate,\r\n            TimeSlot,\r\n            booking_status,\r\n            totalProduct,\r\n            total,\r\n        };\r\n\r\n        let newBooking = await bookingModel.create(bookingObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Booking created successfully\",\r\n            data: newBooking,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS OF A USER BY USER ID\r\nconst getUserAllBookings = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\" });\r\n        }\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n        }\r\n\r\n        let allBookingsOfAUser = await bookingModel.find({ userId: user.userId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allBookingsOfAUser,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS\r\nconst getAllBookings = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Key is required\" });\r\n        }\r\n\r\n        if (key === adminSecretKey) {\r\n            let allBookings = await bookingModel.find({});\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: allBookings,\r\n            });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        }\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL SLOTS OF A PERTICULAR DATE\r\nconst getAllSlotsOfADate = async (req, res) => {\r\n    try {\r\n        let { date } = req.params;\r\n        if (!date) {\r\n            return res.status(400).send({ status: false, message: \"Date is required\" });\r\n        }\r\n\r\n        let allBookings = await bookingModel.find({ BookingDate: date });\r\n\r\n        let timeSlotArr = [];\r\n        if (allBookings.length) {\r\n            for (let booking of allBookings) {\r\n                timeSlotArr.push(booking.TimeSlot);\r\n            }\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            date: date,\r\n            bookedSlots: timeSlotArr,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET SPECIFIC BOOKING OF AN USER\r\nconst getSpecificBooking = async (req, res) => {\r\n    try {\r\n        let { bookingId } = req.params;\r\n        if (!bookingId) {\r\n            return res.status(400).send({ status: false, message: \"bookingId is required\" });\r\n        }\r\n\r\n        let booking = await bookingModel.findById(bookingId);\r\n        if (!booking) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"No booking found with this booking id\",\r\n            });\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: booking,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE BOOKING STATUS\r\nconst updateBookingStatus = async (req, res) => {\r\n    try {\r\n        const { bookingId } = req.params;\r\n\r\n        if (!bookingId) {\r\n            return res.status(400).send({ status: false, message: \"Booking Id is required\" });\r\n        }\r\n\r\n        const { status, question, feedback } = req.body;\r\n\r\n        if (!status) {\r\n            return res.status(400).send({ status: false, message: \"status is required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(bookingId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Booking Id\" });\r\n        }\r\n\r\n        let booking = await bookingModel.findById(bookingId);\r\n\r\n        if (!booking) {\r\n            return res.status(200).send({ status: true, message: \"Booking Not Found\" });\r\n        }\r\n\r\n        booking.booking_status = status;\r\n        booking.question = question? question : \"\";\r\n        booking.feedback = feedback? feedback : \"\";\r\n\r\n        await booking.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Booking status updated successfully\",\r\n            data: booking,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createBooking,\r\n    getAllSlotsOfADate,\r\n    getUserAllBookings,\r\n    getAllBookings,\r\n    getSpecificBooking,\r\n    updateBookingStatus,\r\n};\r\n","const categoryModel = require(\"../models/categoryModel\");\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require(\"../config/logger.config\");\r\n\r\n// ADD CATEGORY\r\nconst addCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let { name, description } = req.body;\r\n\r\n        if (!name || !description) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n        let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n        let categoryImgFolder = path.join(__dirname, \"..\", \"..\", \"categoryImages\");\r\n\r\n        if (!fs.existsSync(categoryImgFolder)) {\r\n            fs.mkdirSync(categoryImgFolder);\r\n        }\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/categoryImages/\";\r\n        let imgUniqName = uuid.v4() + File_Extension;\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n        fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n        let imgObj = {\r\n            fileName: imgUniqName,\r\n            filePath: imgFullUrl,\r\n        };\r\n\r\n        let categoryObj = {\r\n            name,\r\n            description,\r\n            category_image: imgObj,\r\n        };\r\n\r\n        let newCategory = await categoryModel.create(categoryObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category Added\",\r\n            data: newCategory,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET CATEGORY BY CATEGORY ID\r\nconst getCategoryById = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n\r\n        let category;\r\n        if (categoryId) {\r\n            if (!isValidObjectId(categoryId)) {\r\n                return res.status(400).send({ status: false, message: \"Invalid category Id\"});\r\n            }\r\n            category = await categoryModel.findById(categoryId);\r\n        };\r\n\r\n        if (!category) {\r\n            return res.status(200).send({ status: true, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let allProducts = await productModel.find({ category: category._id });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: category,\r\n            products: allProducts,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getCategoryById API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET CATEGORY BY SERVICE SEARCH {allProductSearchByKeywords}\r\nconst getProductByKeywords  = async (req, res) => {\r\n    try {\r\n        let { service_search } = req.body;\r\n        if (!service_search) {\r\n            return res.status(400).send({ status: false, message: \"Search parameter is required\"});\r\n        };\r\n\r\n        let filter = {\r\n            $or: [\r\n            { name: { $regex: service_search, $options: \"i\" } },\r\n            { subTitle: { $regex: service_search, $options: \"i\" } }, \r\n            { description: { $regex: service_search, $options: \"i\" } }\r\n            ],\r\n        };\r\n\r\n        let products = await productModel.find(filter);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            products: products,\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getProductByKeywords API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CATEGORIES\r\nconst getAllCategories = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let allCategories = await categoryModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allCategories,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllCategories API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// UPDATE CATEGORY BY CATEGORY ID\r\nconst updateCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"Category Id is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(categoryId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Category Id\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            category.name = reqBody.name;\r\n        };\r\n\r\n        if (\"description\" in reqBody) {\r\n            category.description = reqBody.description;\r\n        };\r\n\r\n        if (\"FileUpload\" in reqBody) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            // console.log(\"reqbody: \", reqBody);\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/categoryImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n            let oldImgName = category.category_image.fileName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", oldImgName);\r\n            \r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let newImgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            category.category_image = newImgObj;\r\n        };\r\n\r\n        await category.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category updated successfully\",\r\n            data: category,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE CATEGORY\r\nconst deleteCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n        \r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"CategoryId is required\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"No category found with this category Id\"})\r\n        };\r\n\r\n        await categoryModel.deleteOne({ _id: categoryId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addCategory,\r\n    getCategoryById,\r\n    getProductByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n};\r\n","const logger = require('../config/logger.config');\r\nconst classScheduleModel = require('../models/classScheduleModel');\r\nconst courseModel = require('../models/courseModel');\r\n\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst uuid = require('uuid');\r\n\r\nconst { isValidObjectId } = require('mongoose');\r\nlet { getCurrentIPAddress } = require('../uitls/utils');\r\nlet { port } = require('../config/config');\r\n\r\n\r\n// CREATE CLASS SCHEDULE\r\nconst createClassSchedule = async (req, res) => {\r\n    try {\r\n        const {\r\n            courseId,\r\n            meeting_link,\r\n            teacherId,\r\n            techer_name,\r\n            input_text,\r\n            youtube_video_code,\r\n            status\r\n        } = req.body;\r\n\r\n        let imgObj = null;\r\n        if (\"pdf_file\" in req.body || (req.files && req.files.pdf_file)) {\r\n            let { pdf_file } = req.files;\r\n            if (!pdf_file) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"No pdf file uploaded\"\r\n                })\r\n            };\r\n\r\n            let classPdfFolder = path.join(__dirname, \"..\", \"..\", \"class_pdf\");\r\n\r\n            if (!fs.existsSync(classPdfFolder)) {\r\n                fs.mkdirSync(classPdfFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/class_pdf/\";\r\n            let imgUniqName = uuid.v4() + \".\" + pdf_file.name.split(\".\").pop();\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"class_pdf\", imgUniqName);\r\n\r\n            pdf_file.mv(imgSavingPath, (err) => {\r\n                if (err) {\r\n                    throw err;\r\n                };\r\n            });\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        }\r\n\r\n\r\n        const classData = {\r\n            courseId,\r\n            meeting_link,\r\n            teacherId,\r\n            techer_name,\r\n            input_text,\r\n            pdf_upload_file: imgObj,\r\n            youtube_video_code,\r\n            status\r\n        };\r\n\r\n        let newSchedule = await classScheduleModel.create(classData);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Class schedule created successfully\",\r\n            data: newSchedule\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in createClassSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CLASS SCHEDULE\r\nconst getAllClassSchedule = async (req, res) => {\r\n    try {\r\n        const allClassSchedules = await classScheduleModel.find({});\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Class schedule created successfully\",\r\n            data: allClassSchedules\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllClassSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET CLASS SCHEDULE BY COURSE ID\r\nconst getSchedule = async (req, res) => {\r\n    try {\r\n        const { courseId } = req.params;\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId is required\" \r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let classSchedule = await classScheduleModel.findById(courseId);\r\n\r\n        if (!classSchedule) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Class schedule not found\" \r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: classSchedule\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE CLASS SCHEDULE\r\nconst updateSchedule = async (req, res) => {\r\n    try {\r\n        const { courseId } = req.params;\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId is required\" \r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let s = await classScheduleModel.findById(courseId);\r\n\r\n        if (!s) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Class schedule not found\" \r\n            });\r\n        };\r\n\r\n        const e = req.body;\r\n\r\n        if (\"meeting_link\" in e) {\r\n            s.meeting_link = e.meeting_link;\r\n        };\r\n\r\n        if (\"techer_name\" in e) {\r\n            s.techer_name = e.techer_name;\r\n        };\r\n\r\n        if (\"input_text\" in e) {\r\n            s.input_text = e.input_text;\r\n        };\r\n\r\n        if (\"youtube_video_code\" in e) {\r\n            s.youtube_video_code = e.youtube_video_code\r\n        };\r\n\r\n        if (\"status\" in e) {\r\n            s.status= e.status\r\n        };\r\n\r\n        if (\"pdf_file\" in req.body || (req.files && req.files.pdf_file)) {\r\n\r\n            let oldImgName = s.pdf_upload_file.fileName;\r\n\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"class_pdf\");\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            };\r\n\r\n            let { pdf_file } = req.files;\r\n            if (!pdf_file) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"No pdf file uploaded\"\r\n                })\r\n            };\r\n\r\n            let classPdfFolder = path.join(__dirname, \"..\", \"..\", \"class_pdf\");\r\n\r\n            if (!fs.existsSync(classPdfFolder)) {\r\n                fs.mkdirSync(classPdfFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/class_pdf/\";\r\n            let imgUniqName = uuid.v4() + \".\" + pdf_file.name.split(\".\").pop();\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"class_pdf\", imgUniqName);\r\n\r\n            pdf_file.mv(imgSavingPath, (err) => {\r\n                if (err) {\r\n                    throw err;\r\n                };\r\n            });\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            s.pdf_upload_file = imgObj;\r\n        }\r\n\r\n        await s.save();\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Schedule updated successfully\",\r\n            data: s\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE SCHEDULE\r\nconst deleteSchedule = async (req, res) => {\r\n    try {\r\n        const { courseId } = req.params;\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId is required\" \r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let s = await classScheduleModel.findById(courseId);\r\n\r\n        if (!s) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Class schedule not found\" \r\n            });\r\n        };\r\n\r\n        let pdf_file_name = s.pdf_upload_file.fileName;\r\n        if (pdf_file_name) {\r\n            let pdf_file_path = path.join(__dirname, \"..\", \"..\", \"class_pdf\", pdf_file_name);\r\n            if (fs.existsSync(pdf_file_path)) {\r\n                fs.unlinkSync(pdf_file_path);\r\n            }\r\n        };\r\n\r\n        let deleteSchedule = await classScheduleModel.deleteOne({ courseId });\r\n\r\n        if (!deleteSchedule) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Schedule not found or alrady deleted\"\r\n            })\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Schedule deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    createClassSchedule,\r\n    getAllClassSchedule,\r\n    getSchedule,\r\n    updateSchedule,\r\n    deleteSchedule\r\n};","const courseModel = require('../models/courseModel');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst uuid = require('uuid');\r\nconst logger = require('../config/logger.config');\r\nconst { isValidObjectId } = require('mongoose');\r\nlet { getCurrentIPAddress } = require('../uitls/utils');\r\nlet { port, adminSecretKey } = require('../config/config');\r\n\r\n\r\n// ADD COURSE\r\nconst addCourse = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Key is required'\r\n            })\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        const {\r\n            categoryId,\r\n            category_name,\r\n            course_name,\r\n            description,\r\n            course_fee,\r\n            duration,\r\n            start_date,\r\n            end_date,\r\n            class_time,\r\n            course_seat_limit,\r\n            offer_in_amount,\r\n            coutse_type\r\n        } = req.body;\r\n\r\n        let imgObj = null;\r\n        if (\"FileUpload\" in req.body ) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let courseImgFolder = path.join(__dirname, \"..\", \"..\", \"courseImages\");\r\n\r\n            if (!fs.existsSync(courseImgFolder)) {\r\n                fs.mkdirSync(courseImgFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/courseImages/\";\r\n            let imgUniqName = uuid.v4() + \".\" + course_image.name.split(\".\").pop();\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        };\r\n\r\n        let courseData = {\r\n            categoryId,\r\n            category_name,\r\n            course_name,\r\n            description,\r\n            course_fee,\r\n            duration,\r\n            start_date,\r\n            end_date,\r\n            class_time,\r\n            course_seat_limit,\r\n            offer_in_amount,\r\n            coutse_type,\r\n            course_image: imgObj\r\n        };\r\n\r\n        let newCourse = await courseModel.create(courseData);\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Course created successfully\",\r\n            data: newCourse\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL COURSES\r\nconst getAllCourses = async (req, res) => {\r\n    try {\r\n        let allCourses = await courseModel.find({});\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allCourses\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllCourses API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET A COURSE BY COURSE ID\r\nconst getCourseById = async (req, res) => {\r\n    try {\r\n        const { courseId } = req.params;\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId is required\" \r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let c = await courseModel.findById(courseId);\r\n\r\n        if (!c) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Course not found\" \r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: c\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getCourseById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\n// UPDATE COURSE BY COURSE ID\r\nconst updateCourse = async (req, res) => {\r\n    try {\r\n        const { courseId } = req.params;\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId is required\" \r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let c = await courseModel.findById(courseId);\r\n\r\n        if (!c) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Course not found\" \r\n            });\r\n        };\r\n\r\n        let e = req.body;\r\n\r\n        if (\"category_name\" in e) {\r\n            c.category_name = e.category_name;\r\n        };\r\n\r\n        if (\"course_name\" in e) {\r\n            c.course_name = e.course_name;\r\n        };\r\n\r\n        if (\"description\" in e) {\r\n            c.description = e.description;\r\n        };\r\n\r\n        if (\"course_fee\" in e) {\r\n            c.course_fee = e.course_fee;\r\n        };\r\n\r\n        if (\"duration\" in e) {\r\n            c.duration = e.duration;\r\n        };\r\n\r\n        if (\"start_date\" in e) {\r\n            c.start_date = e.start_date;\r\n        };\r\n\r\n        if (\"end_date\" in e) {\r\n            c.end_date = e.end_date;\r\n        };\r\n\r\n        if (\"class_time\" in e) {\r\n            c.class_time = e.class_time;\r\n        };\r\n\r\n        if (\"course_seat_limit\" in e) {\r\n            c.course_seat_limit = e.course_seat_limit;\r\n        };\r\n\r\n        if (\"offer_in_amount\" in e) {\r\n            c.offer_in_amount = e.offer_in_amount;\r\n        };\r\n\r\n        if (\"coutse_type\" in e) {\r\n            c.coutse_type = e.coutse_type;\r\n        };\r\n\r\n        if (\"FileUpload\" in req.body) {\r\n            let oldImgName = c.course_image.fileName;\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", oldImgName);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                };\r\n            };\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/courseImages/\";\r\n            let imgUniqName = uuid.v4() + \".\" + course_image.name.split(\".\").pop();\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            c.course_image = imgObj;\r\n        };\r\n\r\n        await c.save();\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Course updated successfully\",\r\n            data: c\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE COURSE BY COURSE ID\r\nconst deleteCourse = async (req, res) => {\r\n    try {\r\n        const { courseId } = req.params;\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId is required\" \r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let c = await courseModel.findById(courseId);\r\n\r\n        if (!c) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Course not found\" \r\n            });\r\n        };\r\n\r\n        let oldImgName = c.course_image.fileName;\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", oldImgName);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                };\r\n            };\r\n\r\n        let deleteCourse = await courseModel.deleteOne({ _id: courseId });\r\n\r\n        if (!deleteCourse) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Course not found or already deleted\" \r\n            });\r\n        };\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addCourse,\r\n    getAllCourses,\r\n    getCourseById,\r\n    updateCourse,\r\n    deleteCourse\r\n};","const coursePurchaseModel = require('../models/coursePurchaseModel');\r\nconst userModel = require('../models/userModel');\r\nconst courseModel = require('../models/courseModel');\r\nconst logger = require('../config/logger.config');\r\n\r\n\r\n// PURCHASE A COURSE\r\nconst purchaseCourse = async (req, res) => {\r\n    try {\r\n        let { courseId, amount, status, userId, notes } = req.body;\r\n\r\n        let purchaseData = {\r\n            courseId, \r\n            amount, \r\n            status, \r\n            userId, \r\n            notes\r\n        };\r\n        let newCouusePurchase = await coursePurchaseModel.create(purchaseData);\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Course purchased successfully\",\r\n            data: newCouusePurchase\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in purchaseCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET A PURCHASED COURSE BY ID\r\nconst getPurchasedCourse = async (req, res) => {\r\n    try {\r\n        const { purchaseId } = req.params;\r\n\r\n        if (!purchaseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"purchaseId is required\" \r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(purchaseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid purchaseId\"\r\n            });\r\n        };\r\n\r\n        let purchasedCourse = await coursePurchaseModel.findById(purchaseId);\r\n\r\n        if (!purchasedCourse) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Purchased course not found\"\r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: purchasedCourse\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getPurchasedCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL PURCHASED COURSES BY A STUDENT\r\nconst getAllPurchasedCourses = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"userId is required\"\r\n            });\r\n        };\r\n\r\n        let allPurchasedCourses = await coursePurchaseModel.find({userId});\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allPurchasedCourses\r\n        });\r\n        \r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllPurchasedCourses API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE A PURCHASED COURSE DETAILS\r\nconst updatePurchasedCourseDetails = async (req, res) => {\r\n    try {\r\n        const { purchaseId } = req.params;\r\n\r\n        if (!purchaseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"purchaseId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(purchaseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid purchaseId\"\r\n            });\r\n        };\r\n\r\n        let p = await coursePurchaseModel.findById(purchaseId);\r\n\r\n        if (!p) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Purchased course not found\"\r\n            });\r\n        };\r\n\r\n        const e = req.body;\r\n\r\n        if (\"amount\" in e) {\r\n            p.amount = e.amount;\r\n        };\r\n\r\n        if (\"status\" in e) {\r\n            p.status = e.status;\r\n        };\r\n\r\n        if (\"notes\" in e) {\r\n            p.notes = e.notes;\r\n        };\r\n\r\n        await p.save();\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Details updated successfully\",\r\n            data: p\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updatePurchasedCourseDetails API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE PURCHASE DETAILS\r\nconst deletePurchaseDetails = async (req, res) => {\r\n    try {\r\n        const { purchaseId } = req.params;\r\n\r\n        if (!purchaseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"purchaseId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(purchaseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid purchaseId\"\r\n            });\r\n        };\r\n\r\n        let deletePurchase = await coursePurchaseModel.deleteOne({ _id: purchaseId});\r\n\r\n        if (!deletePurchase) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Purchase details not found or already deleted\"\r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Purchase details deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deletePurchaseDetails API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    purchaseCourse,\r\n    getPurchasedCourse,\r\n    getAllPurchasedCourses,\r\n    updatePurchasedCourseDetails,\r\n    deletePurchaseDetails\r\n}","const bookingModel = require(\"../models/bookingModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst superDealModel = require(\"../models/superDealModel\");\r\nconst bannerImageModel = require(\"../models/bannerImageModel\");\r\nconst { getCurrentIPAddress } = require(\"../uitls/utils\");\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require('../config/logger.config');\r\n\r\n// DASHBOARD API\r\nconst getDashboard = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        let categories = await categoryModel.find({});\r\n\r\n        let superdeals = await superDealModel.find({});\r\n\r\n        let myAllBookings = null;\r\n        if (userId) {\r\n            myAllBookings = await bookingModel.find({ userId });\r\n        }\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        let bannerImages;\r\n        if (bannerObj) {\r\n            bannerImages = bannerObj.bannerImages ? bannerObj.bannerImages : null;\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            categoryList: categories,\r\n            superdealList: superdeals,\r\n            bookingList: myAllBookings,\r\n            bannerImages: bannerImages ? bannerImages : [],\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getDashboard API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE BANNER IMAGES\r\nconst updateBannerImages = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        if (!bannerObj) {\r\n            bannerObj = await bannerImageModel.create({bannerImages: []});\r\n        };\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let bannerImage = req.files.bannerImage;\r\n\r\n        if (!bannerImage) {\r\n            return res.status(400).send({ status: false, message: \"No banner image uploaded\" });\r\n        }\r\n\r\n        let index = parsedData.index; //{\"isNewPick\":false,\"index\":1,\"img_id\":\"64ffebc1f3bfc5d77220193b\",\"imageName\":\"1694493633669-432139964.jpg\"}\r\n        let img_id = parsedData.img_id ? parsedData.img_id : \"\";\r\n        let imageName = parsedData.imageName;\r\n        let isNewPick = parsedData.isNewPick;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/bannerImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + bannerImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImage = bannerObj.bannerImages[index].imageName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", oldImage);\r\n\r\n            fs.unlinkSync(oldImgPath);\r\n\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let updatedBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages[index] = updatedBannerObj;\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner updated successfully\",\r\n                data: bannerImages,\r\n            });\r\n        } else {\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let newBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages.push(newBannerObj);\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner added successfully\",\r\n                data: bannerImages,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in updateBannerImages API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE BANNER IMAGE BY ID\r\nconst deleteBannerImage = async (req, res) => {\r\n    try {\r\n        let { imageId, key } = req.params;\r\n        if (!imageId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let bannerObj = await bannerImageModel.findOne();\r\n\r\n        if (!bannerObj) {\r\n            return res.status(400).send({ status: false, message: \"Not Found!!!\" });\r\n        }\r\n\r\n        if (bannerObj.bannerImages.length) {\r\n            for (let i = 0; i < bannerObj.bannerImages.length; i++) {\r\n                if (imageId === bannerObj.bannerImages[i]._id.toString()) {\r\n\r\n                    let imgName = bannerObj.bannerImages[i].imageName;\r\n                    let imgPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", imgName);\r\n\r\n                    if (fs.existsSync(imgPath)) {\r\n                        fs.unlinkSync(imgPath);\r\n                    };\r\n                    \r\n                    let arr = bannerObj.bannerImages;\r\n                    arr.splice(i, 1);\r\n                    bannerObj.bannerImages = arr;\r\n\r\n                    await bannerObj.save();\r\n                }\r\n            }\r\n        }\r\n\r\n        let bannerImages = bannerObj.bannerImages;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Banner deleted successfully\",\r\n            data: bannerImages,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in deleteBannerImage API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    getDashboard,\r\n    updateBannerImages,\r\n    deleteBannerImage,\r\n};\r\n","const productModel = require(\"../models/productModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst superdealModel = require(\"../models/superDealModel\");\r\n\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// ADD PRODUCT\r\nconst addProduct = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"key is required\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let { name, subTitle, description, category, price, stock_item, status, discount } = req.body;\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n        let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n\r\n        let imgRelativePath;\r\n        if (category || req.body.category) {\r\n            imgRelativePath = \"/productImages/\";\r\n        } else {\r\n            imgRelativePath = \"/superdealImages/\";\r\n        }\r\n\r\n        let imgUniqName = uuid.v4() + File_Extension;\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n\r\n        let imgSavingPath\r\n        if (category || req.body.category) {\r\n            imgSavingPath = path.join(__dirname, \"..\", \"..\", \"productImages\", imgUniqName);\r\n        } else {\r\n            imgSavingPath = path.join(__dirname, \"..\", \"..\", \"superdealImages\", imgUniqName);\r\n        };\r\n        \r\n        fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n        let imgObj = {\r\n            imageName: imgUniqName,\r\n            imagePath: imgFullUrl,\r\n        };\r\n\r\n        let productObj = {\r\n            name,\r\n            subTitle,\r\n            description,\r\n            price,\r\n            stock_item,\r\n            service_image: imgObj,\r\n            status,\r\n            discount,\r\n        };\r\n\r\n        let newProduct;\r\n        if (category || req.body.category) {\r\n            productObj.category = category;\r\n            newProduct = await productModel.create(productObj);\r\n        } else {\r\n            newProduct = await superdealModel.create(productObj);\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Product Added Successfully\",\r\n            data: newProduct,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET PRODUCT BY PRODUCT ID\r\nconst getProduct = async (req, res) => {\r\n    try {\r\n        let { productId, key } = req.params;\r\n        if (!productId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let product = await productModel.findById(productId);\r\n\r\n        if (!product) {\r\n            return res.status(404).send({ status: false, message: \"Product Not Found\" });\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: product,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL PRODUCTS\r\nconst getAllProducts = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Key is required\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let products = await productModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: products,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE PRODUCT BY ID\r\nconst updateProduct = async (req, res) => {\r\n    try {\r\n        let { productId, key } = req.params;\r\n\r\n        if (!productId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(productId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Object Id\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let product = await productModel.findById(productId);\r\n        let superdeal = await superdealModel.findById(productId);\r\n\r\n        if (!product && !superdeal) {\r\n            return res.status(404).send({ status: false, message: \"Item not found\" });\r\n        }\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (product) {\r\n            if (\"name\" in reqBody) {\r\n                product.name = reqBody.name;\r\n            }\r\n\r\n            if (\"subTitle\" in reqBody) {\r\n                product.subTitle = reqBody.subTitle;\r\n            }\r\n\r\n            if (\"description\" in reqBody) {\r\n                product.description = reqBody.description;\r\n            }\r\n\r\n            if (\"price\" in reqBody) {\r\n                product.price = reqBody.price;\r\n            }\r\n\r\n            if (\"stock_items\" in reqBody) {\r\n                product.stock_items = reqBody.stock_items;\r\n            }\r\n\r\n            if (\"status\" in reqBody) {\r\n                product.status = reqBody.status;\r\n            }\r\n\r\n            if (\"discount\" in reqBody) {\r\n                product.discount = reqBody.discount;\r\n            }\r\n\r\n            if (\"FileUpload\" in reqBody) {\r\n                let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n                let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n                let currentIpAddress = getCurrentIPAddress();\r\n                let imgRelativePath = \"/productImages/\";\r\n                let imgUniqName = uuid.v4() + File_Extension;\r\n                let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n                let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"productImages\", imgUniqName);\r\n\r\n                let productOldImage = product.service_image.imageName;\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"productImages\", productOldImage);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                };\r\n\r\n                fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n                let newImgObj = {\r\n                    imageName: imgUniqName,\r\n                    imagePath: imgFullUrl,\r\n                };\r\n\r\n                product.service_image = newImgObj;\r\n            }\r\n\r\n            await product.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Product Updated Successfully\",\r\n                data: product,\r\n            });\r\n        } else {\r\n            if (\"name\" in reqBody) {\r\n                superdeal.name = reqBody.name;\r\n            }\r\n\r\n            if (\"subTitle\" in reqBody) {\r\n                superdeal.subTitle = reqBody.subTitle;\r\n            }\r\n\r\n            if (\"description\" in reqBody) {\r\n                superdeal.description = reqBody.description;\r\n            }\r\n\r\n            if (\"price\" in reqBody) {\r\n                superdeal.price = reqBody.price;\r\n            }\r\n\r\n            if (\"stock_items\" in reqBody) {\r\n                superdeal.stock_items = reqBody.stock_items;\r\n            }\r\n\r\n            if (\"status\" in reqBody) {\r\n                superdeal.status = reqBody.status;\r\n            }\r\n\r\n            if (\"discount\" in reqBody) {\r\n                superdeal.discount = reqBody.discount;\r\n            };\r\n\r\n            if (\"FileUpload\" in reqBody) {\r\n                let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n                let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n                let currentIpAddress = getCurrentIPAddress();\r\n                let imgRelativePath = \"/superdealImages/\";\r\n                let imgUniqName = uuid.v4() + File_Extension;\r\n                let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n                let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"superdealImages\", imgUniqName);\r\n\r\n                let superdealOldImage = superdeal.service_image.imageName;\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"superdealImages\", superdealOldImage);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n\r\n                fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n                let newImgObj = {\r\n                    imageName: imgUniqName,\r\n                    imagePath: imgFullUrl,\r\n                };\r\n\r\n                superdeal.service_image = newImgObj;\r\n            }\r\n\r\n            await superdeal.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Superdeal Updated Successfully\",\r\n                data: superdeal,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE PRODUCT BY PRODUCT ID\r\nconst deleteProduct = async (req, res) => {\r\n    try {\r\n        let { productId, key } = req.params;\r\n\r\n        if (!productId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(productId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid objectId\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let product = await productModel.findById(productId);\r\n        let superdeal = await superdealModel.findById(productId);\r\n\r\n        if (!product && !superdeal) {\r\n            return res.status(404).send({ status: false, message: \"Item not found\" });\r\n        }\r\n\r\n        if (product) {\r\n            let productImgName = product.service_image.imageName;\r\n            let imagePath = path.join(__dirname, \"..\", \"..\", \"productImages\", productImgName);\r\n\r\n            if (fs.existsSync(imagePath)) {\r\n                fs.unlinkSync(imagePath);\r\n            };\r\n\r\n            await productModel.deleteOne({ _id: productId });\r\n        } else {\r\n\r\n            let superdealImgName = superdeal.service_image.imageName;\r\n            let imagePath = path.join(__dirname, \"..\", \"..\", \"superdealImages\", superdealImgName);\r\n\r\n            if (fs.existsSync(imagePath)) {\r\n                fs.unlinkSync(imagePath);\r\n            };\r\n\r\n            await superdealModel.deleteOne({ _id: productId });\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Item deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addProduct,\r\n    getProduct,\r\n    getAllProducts,\r\n    updateProduct,\r\n    deleteProduct,\r\n};\r\n","const superdealModel = require('../models/superDealModel');\r\n\r\nlet { getCurrentIPAddress } = require('../uitls/utils');\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require('mongoose');\r\n\r\n\r\n// ADD SUPERDEAL\r\nconst addSuperDeal = async (req, res) => {\r\n    try {\r\n        let { name, subTitle, description, category, price, stock_items, status, discount } = req.body;\r\n\r\n        let { service_image } = req.files;\r\n\r\n        if (!service_image) {\r\n            return res.status(400).send({ status: false, message: \"No superdeal image uploaded\"});\r\n        };\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/superdealImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + service_image.name.split(\".\").pop();\r\n        let imgUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"superdealImages\", imgUniqName);\r\n\r\n        service_image.mv(imgSavingPath, (err) => {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n        });\r\n\r\n        let imgObj = {\r\n            imageName: imgUniqName,\r\n            imagePath: imgUrl\r\n        };\r\n\r\n        let dbObj = {\r\n            name,\r\n            subTitle,\r\n            description,\r\n            category,\r\n            price,\r\n            stock_items,\r\n            status,\r\n            service_image: imgObj,\r\n            discount\r\n        };\r\n\r\n        let newDeal = await superdealModel.create(dbObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: newDeal\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET SUPERDEAL BY ID\r\nconst getSuperdealById = async (req, res) => {\r\n    try {\r\n        let { superdealId } = req.params;\r\n        if (!superdealId) {\r\n            return res.status(400).send({ status: false, message: \"Super Admin Id is required\" });\r\n        };\r\n\r\n        let superdeal = await superdealModel.findById(superdealId);\r\n\r\n        if (!superdeal) {\r\n            return res.status(404).send({ status: false, message: \"Not Found\"});\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: superdeal,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET ALL SUPERDEALS\r\nconst getAllSuperdeals = async (req, res) => {\r\n    try {\r\n        let allSuperdeals = await superdealModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allSuperdeals,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// UPDATE SUPERDEAL BY ID\r\nconst updateSuperdeal = async (req, res) => {\r\n    try {\r\n        let { superdealId } = req.params;\r\n        if (!superdealId) {\r\n            return res.status(400).send({ status: false, message: \"Superdeal Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(superdealId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Superdeal Id\"});\r\n        };\r\n\r\n        let superdeal = await superdealModel.findById(superdealId);\r\n\r\n        if (!superdeal) {\r\n            return res.status(404).send({ status: false, message: \"No Superdeal found with this Id\" })\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            superdeal.name = reqBody.name;\r\n        };\r\n\r\n        if (\"subTitle\" in reqBody) {\r\n            superdeal.subTitle = reqBody.subTitle;\r\n        };\r\n\r\n        if (\"description\" in reqBody) {\r\n            superdeal.description = reqBody.description;\r\n        };\r\n\r\n        if (\"price\" in reqBody) {\r\n            superdeal.price = reqBody.price;\r\n        };\r\n\r\n        if (\"stock_items\" in reqBody) {\r\n            superdeal.stock_items = reqBody.price;\r\n        };\r\n\r\n        if (\"status\" in reqBody) {\r\n            superdeal.status = reqBody.status;\r\n        };\r\n\r\n        if (\"discount\" in reqBody) {\r\n            superdeal.discount = reqBody.discount;\r\n        };\r\n\r\n        if (\"service_image\" in reqBody || (req.files && req.files.service_image )) {\r\n            let service_image = req.files.service_image;\r\n\r\n            if (!service_image) {\r\n                return res.status(400).send({ status: false, message: \"No service image uploaded\"});\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/superdealImages/\";\r\n            let imgUniqName = uuid.v4() + \".\" + service_image.name.split(\".\").pop();\r\n            let imgUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"superdealImages\", imgUniqName);\r\n\r\n            let oldImgName = superdeal.service_image.imageName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"superdealImages\", oldImgName);\r\n            fs.unlinkSync(oldImgPath);\r\n\r\n            service_image.mv(imgSavingPath, (err) => {\r\n                if (err) {\r\n                    throw err;\r\n                };\r\n            });\r\n\r\n            let imgObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgUrl\r\n            };\r\n\r\n            superdeal.service_image = imgObj;\r\n        };\r\n\r\n        await superdeal.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Superdeal updated successfully\",\r\n            data: superdeal,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE SUPERDEAL BY ID\r\nconst deleteSuperdeal = async (req, res) => {\r\n    try {\r\n        let { superdealId } = req.params;\r\n        if (!superdealId) {\r\n            return res.status(400).send({ status: false, message: \"Superdeal Id is required\"});\r\n        };\r\n\r\n        let superdeal = await superdealModel.findById(superdealId);\r\n\r\n        if (!superdeal) {\r\n            return res.status(404).send({ status: false, message: \"Not Found\"});\r\n        };\r\n\r\n        let superdealImgName = superdeal.service_image.imageName;\r\n        let superdealImgPath = path.join(__dirname, \"..\", \"..\", \"superdealImages\", superdealImgName);\r\n        fs.unlinkSync(superdealImgPath);\r\n\r\n        await superdealModel.deleteOne({ _id: superdealId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addSuperDeal,\r\n    getSuperdealById,\r\n    getAllSuperdeals,\r\n    updateSuperdeal,\r\n    deleteSuperdeal,\r\n};","const teacherModel = require('../models/teacherModel');\r\n\r\n\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst uuid = require('uuid');\r\n\r\nconst { isValidObjectId } = require('mongoose');\r\nlet { getCurrentIPAddress } = require('../uitls/utils');\r\nlet { port, adminSecretKey } = require('../config/config');\r\nconst logger = require('../config/logger.config');\r\n\r\n\r\n// ADD TEACHER\r\nconst addTeacher = async (req, res) => {\r\n    try {\r\n\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let { name, description } = req.body;\r\n        \r\n        let imgObj = null;\r\n        if (\"FileUpload\" in req.body) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let teacherImgFolder = path.join(__dirname, \"..\", \"..\", \"uploads\");\r\n\r\n            if (!fs.existsSync(teacherImgFolder)) {\r\n                fs.mkdirSync(teacherImgFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/uploads/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"uploads\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        }\r\n\r\n        let teacherData = {\r\n            name,\r\n            description,\r\n            profilePic: imgObj\r\n        };\r\n\r\n        let newTeacher = await teacherModel.create(teacherData);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Teacher added successfully\",\r\n            data: newTeacher\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addTeacher API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL TEACHERS\r\nconst getAllTeachers = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let allTeachers = await teacherModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allTeachers\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllTeachers API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET TEACHER BY TEACHER ID\r\nconst getTeacherById = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n        \r\n        const { teacherId } = req.params;\r\n        if (!teacherId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"TeacherId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(teacherId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid teacherId\"\r\n            });\r\n        };\r\n\r\n        let teacher = await teacherModel.findById(teacherId);\r\n\r\n        if (!teacher) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Teacher not found\"\r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: teacher\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getTeacherById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE TEACHER BY TEACHER ID\r\nconst updateTeacher = async (req, res) => {\r\n    try {\r\n        const { teacherId } = req.params;\r\n        if (!teacherId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"TeacherId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(teacherId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid teacherId\"\r\n            });\r\n        };\r\n\r\n        let t = await teacherModel.findById(teacherId);\r\n\r\n        if (!t) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Teacher not found\"\r\n            });\r\n        };\r\n\r\n        let e = req.body;\r\n\r\n        if (\"name\" in e) {\r\n            t.name = e.name;\r\n        };\r\n\r\n        if (\"description\" in e) {\r\n            t.description = e.description;\r\n        };\r\n\r\n        if ( \"FileUpload\" in e ) {\r\n            let oldImgName = t.profilePic.fileName;\r\n\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"uploads\");\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            };\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let teacherImgFolder = path.join(__dirname, \"..\", \"..\", \"uploads\");\r\n\r\n            if (!fs.existsSync(teacherImgFolder)) {\r\n                fs.mkdirSync(teacherImgFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/uploads/\";\r\n            let imgUniqName = uuid.v4() + \".\" + profilePic.name.split(\".\").pop();\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"uploads\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            t.profilePic = imgObj;\r\n        };\r\n\r\n        await t.save();\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Teacher data updated successfully\",\r\n            data: t\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateTeacher API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE TEACHER BY TEACHER ID\r\nconst deleteTeacher = async (req, res) => {\r\n    try {\r\n        const { teacherId } = req.params;\r\n        if (!teacherId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"TeacherId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(teacherId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid teacherId\"\r\n            });\r\n        };\r\n\r\n        let t = await teacherModel.findById(teacherId);\r\n\r\n        if (!t) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Teacher not found\"\r\n            });\r\n        };\r\n\r\n        let oldImgName = t.profilePic.fileName;\r\n        let oldImgPath = path.join(__dirname, \"..\", \"..\", \"uploads\", oldImgName);\r\n\r\n        if (fs.existsSync(oldImgPath)) {\r\n            fs.unlinkSync(oldImgPath);\r\n        };\r\n\r\n        await teacherModel.deleteOne({_id: teacherId});\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Teacher deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteTeacherById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addTeacher,\r\n    getAllTeachers,\r\n    getTeacherById,\r\n    updateTeacher,\r\n    deleteTeacher\r\n};","const userModel = require(\"../models/userModel\");\r\nconst adminModel = require(\"../models/adminModel\");\r\nconst deletedUserModel = require('../models/deleteUserModel');\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst bookingModel = require(\"../models/bookingModel\");\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\n\r\n\r\n// LOGIN USER\r\nconst authenticateUser = async (req, res) => {\r\n    try {\r\n        let { email, profilePic, name, userId } = req.body;\r\n\r\n        const isUserExists = await userModel.findOne({ userId: userId });\r\n\r\n        if (!isUserExists) {\r\n            let userObj = {\r\n                userId,\r\n                name,\r\n                email,\r\n                profilePic\r\n            };\r\n\r\n            let newUser = await userModel.create(userObj);\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: newUser\r\n            });\r\n        } else {\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: isUserExists,\r\n            });\r\n        };\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// REGISTER USER\r\nconst updateUser = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            user.name = reqBody.name;\r\n        };\r\n\r\n        if (\"phone\" in reqBody) {\r\n            user.phone = reqBody.phone;\r\n        };\r\n\r\n        if (\"gender\" in reqBody) {\r\n            user.gender = reqBody.gender;\r\n        };\r\n\r\n        if (\"date_of_birth\" in reqBody) {\r\n            user.date_of_birth = reqBody.date_of_birth;\r\n        };\r\n\r\n        if (\"Address\" in reqBody) {\r\n            if (\"address\" in reqBody.Address) {\r\n                user.Address.address = reqBody.Address.address;\r\n            };\r\n\r\n            if (\"apartment\" in reqBody.Address) {\r\n                user.Address.apartment = reqBody.Address.apartment;\r\n            };\r\n\r\n            if (\"city\" in reqBody.Address) {\r\n                user.Address.city = reqBody.Address.city;\r\n            };\r\n\r\n            if (\"post_code\" in reqBody.Address) {\r\n                user.Address.post_code = reqBody.Address.post_code;\r\n            };\r\n\r\n            if (\"state\" in reqBody.Address) {\r\n                user.Address.state = reqBody.Address.state;\r\n            }\r\n        };\r\n\r\n        if (\"education\" in reqBody) {\r\n            user.education = reqBody.education;\r\n        }\r\n\r\n        await user.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User updated successfully\",\r\n            data: user,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET USER BY ID\r\nconst getUserById = async (req, res) => {\r\n    try {\r\n        let { userId, key } = req.params;\r\n\r\n        if (!userId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: user\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET ALL USERS\r\nconst getAllUsers = async (req, res) => {\r\n    try {\r\n        // let { key } = req.params;\r\n\r\n        // if (!key) {\r\n        //     return res.status(400).send({ status: false, message: \"key is required\"});\r\n        // };\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        // };\r\n\r\n        let users = await userModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: users\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE USER\r\nconst deleteUser = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        const { reason, feedback} = req.body;\r\n\r\n        let userAllBookings = await bookingModel.find({ userId });\r\n\r\n        let userData = {\r\n            user,\r\n            userAllBookings\r\n        };\r\n\r\n        let jsonStr = JSON.stringify(userData);\r\n\r\n        await userModel.deleteOne({ userId });\r\n\r\n        let deletedUserData = {\r\n            userId,\r\n            deletedUserData: jsonStr,\r\n            reason,\r\n            feedback,\r\n            deletedAt: new Date().toLocaleString()\r\n        };\r\n\r\n        await deletedUserModel.create(deletedUserData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User deleted successfully\",\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n    authenticateUser,\r\n    updateUser,\r\n    deleteUser,\r\n    getUserById,\r\n    getAllUsers\r\n};\r\n","class BaseError extends Error {\r\n    constructor(name, statusCode, description, details) {\r\n        super(description);\r\n        this.name = name;\r\n        this.statusCode = statusCode;\r\n        this.details = details;\r\n    }\r\n}\r\n\r\nmodule.exports = BaseError;","const { isValidObjectId } = require('mongoose');\r\nconst { tokenSecretKey } = require('../config/config');\r\nconst adminModel = require('../models/adminModel');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\n// AUTHENTICATION\r\nconst Authentication = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers[\"authorization\"];\r\n\r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Token is required\"\r\n            });\r\n        };\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid token\"\r\n            });\r\n        };\r\n\r\n        let decodedToken;\r\n\r\n        jwt.verify(token, tokenSecretKey, (err, decode) => {\r\n            if (err) {\r\n                throw err;\r\n            };\r\n\r\n            decodedToken = decode;\r\n            let loginUserId = decodedToken.adminId;\r\n            req[\"adminId\"] = loginUserId;\r\n            next();\r\n        })\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// AUTHORIZATION\r\nconst Authorization = async (req, res, next) => {\r\n    try {\r\n        let tokenId = req.adminId;\r\n        let { adminId } = req.params;\r\n\r\n        if (!isValidObjectId(adminId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid userId\"});\r\n        };\r\n\r\n        let admin = await adminModel.findById(adminId);\r\n\r\n        if (!admin){\r\n            return res.status(404).send({ status: false, message: \"Admin not found\"})\r\n        };\r\n\r\n        let AdminId = admin._id;\r\n\r\n        if ( tokenId.toString() !== AdminId.toString() ) {\r\n            return res.status(403).send({\r\n                status: false,\r\n                message: \"NOT AUTHORIZED!!!\"\r\n            })\r\n        };\r\n\r\n        next();\r\n    } catch (error) {   \r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = { Authentication, Authorization }","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst adminSchema = new mongoose.Schema({\r\n    adminId: {\r\n        type: String,\r\n    },\r\n\r\n    sessionToken: {\r\n        type: String,\r\n    },\r\n\r\n    name: {\r\n        type: String,\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n    },\r\n\r\n    mobile: {\r\n        type: String,\r\n    },\r\n\r\n    profilePic: {\r\n        picName: {\r\n            type: String,\r\n        },\r\n        picPath: {\r\n            type: String,\r\n        }\r\n    },\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Admin\", adminSchema);","const mongoose = require('mongoose');\r\n\r\nconst bannerImageSchema = new mongoose.Schema({\r\n    bannerImages: [\r\n        {\r\n            imageName: { type: String, default: \"\" },\r\n            imagePath: { type: String, default: \"\" }\r\n        }\r\n    ]\r\n}, { timestamps: true });\r\n\r\n\r\nmodule.exports = mongoose.model(\"BannerImage\", bannerImageSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst bookingSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    bookingId: {\r\n        type: String,\r\n    },\r\n\r\n    f_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    l_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n    },\r\n\r\n    mobile: {\r\n        type: String,\r\n    },\r\n\r\n    address: {\r\n        type: String,\r\n    },\r\n\r\n    apartment: {\r\n        type: String,\r\n    },\r\n\r\n    city: {\r\n        type: String,\r\n    },\r\n\r\n    state: {\r\n        type: String,\r\n    },\r\n\r\n    state_code: {\r\n        type: Number,\r\n    },\r\n\r\n    countryCode: {\r\n        type: String,\r\n    },\r\n\r\n    countryName: {\r\n        type: String,\r\n    },\r\n\r\n    post_code: {\r\n        type: String,\r\n    },\r\n\r\n    productList: [\r\n        {\r\n            name: { type: String },\r\n            subTitle: { type: String },\r\n            bookingQty: { type: Number},\r\n            category: { type: String },\r\n            description: { type: String },\r\n            discount: { type: String },\r\n            imgUrl: { type: String },\r\n            price: { type: Number },\r\n            status: { type: String },\r\n            stock_items: { type: Number },\r\n            subTotal: { type: Number }\r\n        }\r\n    ],\r\n\r\n    totalProduct: {\r\n        type: Number,\r\n    },\r\n\r\n    CGST: {\r\n        type: Number,\r\n    },\r\n\r\n    SGST: {\r\n        type: Number,\r\n    },\r\n\r\n    total: {\r\n        type: Number,\r\n    },\r\n\r\n    grand_total: {\r\n        type: Number,\r\n        default: 0,\r\n    },\r\n\r\n    BookingDate: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    TimeSlot: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    booking_status: {\r\n        type: String,\r\n        enum: [\"ONGOING\", \"COMPLETED\", \"CANCELED\"],\r\n        default: \"ONGOING\"\r\n    },\r\n\r\n    question: {\r\n        type: String,\r\n    },\r\n\r\n    feedback: {\r\n        type: String,\r\n    }\r\n\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Booking\", bookingSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst categorySchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    category_image: {\r\n        fileName: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        filePath: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n\r\n    cat_enum: {\r\n        type: String,\r\n        enum: [\"\", \"\"]\r\n    },\r\n    \r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Category\", categorySchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst classScheduleSchema = new mongoose.Schema({\r\n    courseId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    meeting_link: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    teacherId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    techer_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    input_text: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    pdf_upload_file: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    youtube_video_code: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    status: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Class_Schedule\", classScheduleSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst courseSchema = new mongoose.Schema({\r\n    categoryId: {\r\n        type: ObjectId,\r\n        ref: 'Category'\r\n    },\r\n\r\n    category_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_fee: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    duration: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    start_date: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    end_date: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    class_time: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_image: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    course_seat_limit: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    offer_in_amount: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    coutse_type: {\r\n        type: String,\r\n        default: \"\"\r\n    }\r\n}, { timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Course\", courseSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst coursePurchaseSchema = new mongoose.Schema({\r\n    courseId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    userId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    amount: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    status: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    notes: {\r\n        type: String,\r\n        default: \"\"\r\n    }\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"CoursePurchase\", coursePurchaseSchema);","const mongoose = require('mongoose');\r\n\r\n\r\nconst deletedUserSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    deletedUserData: {\r\n        type: String,\r\n    },\r\n\r\n    reason: {\r\n        type: String,\r\n    },\r\n\r\n    feedback: {\r\n        type: String,\r\n    },\r\n\r\n    deletedAt: {\r\n        type: String,\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"DeletedUser\", deletedUserSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst productSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    subTitle: {\r\n        type: String,\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    service_image: {\r\n        imageName: {\r\n            type: String,\r\n        },\r\n        imagePath: {\r\n            type: String,\r\n        }\r\n    },\r\n\r\n    category: {\r\n        type: ObjectId,\r\n        ref: \"Category\"\r\n    },\r\n\r\n    price: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    stock_items: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    status: {\r\n        type: String,\r\n        enum: [\"AVAILABLE\", \"NOT_AVAILABLE\"]\r\n    },\r\n\r\n    discount: {\r\n        type: String,\r\n    }\r\n},{ timestamps: true });\r\n\r\n\r\nmodule.exports = mongoose.model(\"Product\", productSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst superdealSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    subTitle: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    service_image: {\r\n        imageName: {\r\n            type: String,\r\n        },\r\n\r\n        imagePath: {\r\n            type: String,\r\n        }\r\n    },\r\n\r\n    category: {\r\n        type: ObjectId,\r\n        ref: \"Category\",\r\n    },\r\n\r\n    price: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    stock_items: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    status: {\r\n        type: String,\r\n        enum: [\"AVAILABLE\", \"NOT_AVAILABLE\"]\r\n    },\r\n\r\n    discount: {\r\n        type: String,\r\n    }\r\n}, { timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Superdeal\", superdealSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst teacherSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    profilePic: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\",\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Teacher\", teacherSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst userSchema = new mongoose.Schema(\r\n    {\r\n        userId: {\r\n            type: String,\r\n            unique: true,\r\n            default: \"\"\r\n        },\r\n\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        profilePic: {\r\n            type: String,\r\n        },\r\n\r\n        gender: {\r\n            type: String,\r\n            enum: [\"MALE\", \"FEMALE\", \"OTHER\", \"UNDEFINED\"],\r\n            default: \"UNDEFINED\",\r\n        },\r\n\r\n        Address: {\r\n            address: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            apartment: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            city: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            post_code: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            state: {\r\n                type: String,\r\n                default: \"\"\r\n            }\r\n        },\r\n\r\n        email: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        phone: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        date_of_birth: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        education: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"User\", userSchema);\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createAdmin, \r\n    adminLogin, \r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n    getAllBookingsOfUser,\r\n} = require('../../controllers/adminController');\r\n\r\nconst { Authentication, Authorization } = require('../../middlewares/auth');\r\n\r\n// SIGNUP ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/createSuperAdmin\", createAdmin);\r\n\r\n// LOGIN ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/loginSuperAdmin\", adminLogin);\r\n\r\n// GET ONE DAY BOOKINGS (ADMIN API) // date format: 2024-05-02\r\nrouter.get(\"/api/v1/getOneDayBookings/:adminId/:sessionToken/:date?\", getOneDayBookings);\r\n\r\n// GET ONE WEEK BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneWeekBookings/:adminId/:sessionToken/:startDate?/:endDate?\", getOneWeekBookings);\r\n\r\n// GET ONE MONTH BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneMonthBookings/:adminId/:sessionToken/:month/:year\", getOneMonthBookings);\r\n\r\n// GET ONE YEAR BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneYearBookings/:adminId/:sessionToken/:year\", getOneYearBookings);\r\n\r\n// GET ALL BOOKINGS OF AN USER (ADMIN API)\r\nrouter.get(\"/api/v1/getUserAllBookings/:adminId/:sessionToken/:userId\", getAllBookingsOfUser);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { createBooking, getSpecificBooking, getUserAllBookings, getAllBookings, getAllSlotsOfADate, updateBookingStatus } = require('../../controllers/bookingController');\r\n\r\n// CREATE BOOKING\r\nrouter.post(\"/api/v1/createBooking/:userId\", createBooking);\r\n\r\n// GET AN SPECIFIC BOOKING OF A USER\r\nrouter.get(\"/api/v1/getSpecificBooking/:bookingId\", getSpecificBooking);\r\n\r\n// GET ALL BOOKINGS OF AN USER\r\nrouter.get(\"/api/v1/getUserAllBookings/:userId\", getUserAllBookings);\r\n\r\n// GET ALL BOOKINGS\r\nrouter.get(\"/api/v1/getAllBookings/:key\", getAllBookings);\r\n\r\n// GET ALL BOOKED SLOTS OF A DATE\r\nrouter.get(\"/api/v1/getAllSlots/:date\", getAllSlotsOfADate);\r\n\r\n// UPDATE BOOKING STATUS\r\nrouter.put(\"/api/v1/updateBookingStatus/:bookingId\", updateBookingStatus);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addCategory, \r\n    getCategoryById,\r\n    getProductByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n } = require('../../controllers/categoryController');\r\n\r\n// ADD CATEGORY\r\nrouter.post(\"/api/v1/addCategory/:key\", addCategory);\r\n\r\n// GET CATEGORY BY ID\r\nrouter.post(\"/api/v1/viewService/:categoryId\", getCategoryById);\r\n\r\n// SEARCH PRODUCTS BY KEYWORDS\r\nrouter.post(\"/api/v1/allProductSearchByKeywords\", getProductByKeywords);\r\n\r\n// GET ALL CATEGORIES\r\nrouter.get(\"/api/v1/getAllCategories/:key\", getAllCategories);\r\n\r\n// UPDATE CATEGORY\r\nrouter.put(\"/api/v1/updateCategory/:key/:categoryId\", updateCategory);\r\n\r\n// DELETE CATEGORY\r\nrouter.delete(\"/api/v1/deleteCategory/:key/:categoryId\", deleteCategory);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addCourse,\r\n    getAllCourses,\r\n    updateCourse,\r\n    deleteCourse,\r\n    getCourseById\r\n} = require('../../controllers/courseController');\r\n\r\n// ADD COURSE\r\nrouter.post(\"/api/v1/addCourse/:key\", addCourse);\r\n\r\n// GET COURSE BY ID\r\nrouter.get(\"/api/v1/getCourse/:key/:courseId\", getCourseById);\r\n\r\n// GET ALL COURSES\r\nrouter.get(\"/api/v1/getAllCourses/:key\", getAllCourses);\r\n\r\n// UPDATE COURSE BY COURSE ID\r\nrouter.put(\"/api/v1/updateCourse/:key/:courseId\", updateCourse);\r\n\r\n// DELETE COURSE BY COURSE ID\r\nrouter.delete(\"/api/v1/deleteCourse/:key/:courseId\", deleteCourse);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { getDashboard, updateBannerImages, deleteBannerImage } = require('../../controllers/dashboard');\r\n\r\n// GET DASHBOARD\r\nrouter.get(\"/api/v1/getDashboard/:userId?\", getDashboard);\r\n\r\n// ADD/UPDATE BANNER IMAGES\r\nrouter.put(\"/api/v1/addOrUpdateBanner/:key\", updateBannerImages);\r\n\r\n// DELETE BANNER IMAGE\r\nrouter.delete(\"/api/v1/deleteBanner/:imageId/:key\", deleteBannerImage);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addProduct, \r\n    getProduct, \r\n    updateProduct, \r\n    deleteProduct, \r\n    getAllProducts \r\n} = require('../../controllers/productController');\r\n\r\n// ADD PRODUCT\r\nrouter.post(\"/api/v1/addProduct/:key\", addProduct);\r\n\r\n// GET PRODUCT BY ID\r\nrouter.get(\"/api/v1/getProduct/:productId/:key\", getProduct);\r\n\r\n// GET ALL PRODUCTS\r\nrouter.get(\"/api/v1/getAllProducts/:key\", getAllProducts);\r\n\r\n// UPDATE PRODUCT BY PRODUCT ID\r\nrouter.put(\"/api/v1/updateProduct/:productId/:key\", updateProduct);\r\n\r\n// DELETE PRODUCT BY PRODUCT ID\r\nrouter.delete(\"/api/v1/deleteProduct/:productId/:key\", deleteProduct);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { purchaseCourse, getPurchasedCourse, getAllPurchasedCourses, updatePurchasedCourseDetails, deletePurchaseDetails } = require('../../controllers/coursePurchaseController');\r\n\r\n// ADD COURSE PURCHASE DETAILS\r\nrouter.post(\"/api/v1/addPurchaseDetails\", purchaseCourse);\r\n\r\n// GET COURSE PURCHASE DETAILS BY ID\r\nrouter.get(\"/api/v1/getPurchasedDetails/:purchaseId\", getPurchasedCourse);\r\n\r\n// GET ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getAllPurchasedDetails\", getAllPurchasedCourses);\r\n\r\n// UPDATE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.put(\"/api/v1/updatePurchasedDetails/:purchaseId\", updatePurchasedCourseDetails);\r\n\r\n// DELETE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.delete(\"/api/v1/deletePurchaseDetails/:purchaseId\", deletePurchaseDetails);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createClassSchedule, \r\n    getAllClassSchedule,\r\n    getSchedule,\r\n    updateSchedule,\r\n    deleteSchedule,\r\n\r\n} = require('../../controllers/classScheduleController');\r\n\r\n// ADD COURSE PURCHASE DETAILS\r\nrouter.post(\"/api/v1/createSchedule\", createClassSchedule);\r\n\r\n// GET COURSE PURCHASE DETAILS BY ID\r\nrouter.get(\"/api/v1/getSchedule/:courseId\", getSchedule);\r\n\r\n// GET ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getAllClassSchedule\", getAllClassSchedule);\r\n\r\n// UPDATE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.put(\"/api/v1/updateSchedule/:courseId\", updateSchedule);\r\n\r\n// DELETE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.delete(\"/api/v1/deletSchedule/:courseId\", deleteSchedule);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addSuperDeal, \r\n    getSuperdealById, \r\n    getAllSuperdeals, \r\n    updateSuperdeal, \r\n    deleteSuperdeal \r\n} = require('../../controllers/superdealController');\r\n\r\n// ADD SUPERDEAL\r\nrouter.post(\"/api/v1/addSuperdeal\", addSuperDeal);\r\n\r\n// GET SUPERDEAL BY ID\r\nrouter.get(\"/api/v1/getSuperdealById/:superdealId\", getSuperdealById);\r\n\r\n// GET ALL SUPERDEALS\r\nrouter.get(\"/api/v1/getAllSuperdeals\", getAllSuperdeals);\r\n\r\n// UPDATE SUPERDEAL BY ID\r\nrouter.put(\"/api/v1/updateSuperdeal/:superdealId\", updateSuperdeal);\r\n\r\n// DELETE SUPERDEAL BY ID\r\nrouter.delete(\"/api/v1/deleteSuperdeal/:superdealId\", deleteSuperdeal);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addTeacher,\r\n    getAllTeachers,\r\n    getTeacherById,\r\n    updateTeacher,\r\n    deleteTeacher,\r\n\r\n} = require('../../controllers/teacherController');\r\n\r\n// ADD COURSE PURCHASE DETAILS\r\nrouter.post(\"/api/v1/addTeacher/:key\", addTeacher);\r\n\r\n// GET COURSE PURCHASE DETAILS BY ID\r\nrouter.get(\"/api/v1/getTeacher/:teacherId\", getTeacherById);\r\n\r\n// GET ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getAllTeachers/:key\", getAllTeachers);\r\n\r\n// UPDATE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.put(\"/api/v1/updateTeacher/:teacherId\", updateTeacher);\r\n\r\n// DELETE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.delete(\"/api/v1/deletTeacher/:teacherId\", deleteTeacher);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst {\r\n    authenticateUser,\r\n    updateUser,\r\n    getAllUsers,\r\n    getUserById,\r\n    deleteUser, \r\n    \r\n} = require('../../controllers/userController');\r\n\r\n// AUTHENTICATE USER\r\nrouter.post(\"/api/v1/authenticateUser\", authenticateUser);\r\n\r\n// GET USER BY ID\r\nrouter.get(\"/api/v1/getUser/:userId/:key\", getUserById);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/users/:key\", getAllUsers);\r\n\r\n// REGISTER USER\r\nrouter.post(\"/api/v1/updateUser/:userId\", updateUser);\r\n\r\n// DELETE USER BY USER ID\r\nrouter.delete(\"/api/v1/deleteUser/:userId\", deleteUser);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/getAllUsers\", getAllUsers);\r\n\r\n\r\nmodule.exports = router;","const BaseError = require('../errors/base.error');\r\nconst { StatusCodes } = require('http-status-codes');\r\n\r\nfunction errorHandler(err, req, res, next) {\r\n    if (err instanceof BaseError) {\r\n        return res.status(err.statusCode).json({\r\n            success: false,\r\n            message: err.message,\r\n            err: err.details,\r\n            data: {}\r\n        });\r\n    };\r\n\r\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\r\n        success: false,\r\n        message: \"Something went wrong\",\r\n        err: err,\r\n        data: {}\r\n    });\r\n};\r\n\r\nmodule.exports = { errorHandler };","const os = require(\"os\");\r\n\r\n// GET CURRENT IP ADDRESS\r\nlet getCurrentIPAddress = () => {\r\n    let networkInterfaces = os.networkInterfaces();\r\n    let ipAddress = Object.values(networkInterfaces)\r\n        .flat()\r\n        .filter((iface) => iface.family === \"IPv4\" && !iface.internal)\r\n        .map((iface) => iface.address)[0];\r\n    return ipAddress;\r\n};\r\n\r\n// Generate Random AlphaNumeric ID of given length\r\nfunction generateRandomAlphaNumericID(length) {\r\n    let id = \"\";\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        id += characters[randomIndex];\r\n    }\r\n    return id;\r\n};\r\n\r\nmodule.exports = {\r\n    getCurrentIPAddress,\r\n    generateRandomAlphaNumericID,\r\n};\r\n","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"compression\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"express-mongo-sanitize\");","module.exports = require(\"helmet\");","module.exports = require(\"hpp\");","module.exports = require(\"http-status-codes\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"uuid\");","module.exports = require(\"winston\");","module.exports = require(\"winston-mongodb\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fileUpload = require('express-fileupload');\r\nconst cors = require(\"cors\");\r\nconst helmet = require('helmet');\r\n// const rateLimit = require('express-rate-limit');\r\nconst compression = require('compression');\r\n// const xss = require('xss');\r\nconst mongoSanitize = require('express-mongo-sanitize');\r\nconst hpp = require('hpp');\r\n\r\n\r\nconst { port } = require('./src/config/config');\r\nconst { connectToDatabase } = require('./src/config/db.config');\r\nconst { errorHandler } = require('./src/uitls/errorHandler');\r\n\r\nconst app = express();\r\n\r\napp.use(helmet());\r\napp.use(cors());\r\napp.use(compression());\r\n// app.use(xss());\r\napp.use(mongoSanitize());\r\napp.use(hpp()); // HTTP Parameter Pollution prevention\r\napp.use(express.json({ limit: \"50mb\" }));\r\napp.use(express.urlencoded({ extended: true, limit: \"50mb\" }));\r\napp.use(bodyParser.json({ limit: \"50mb\" }));\r\napp.use(bodyParser.text());\r\napp.use(fileUpload());\r\napp.use(cors());\r\n\r\nconst adminRoutes = require('./src/routes/v1/adminRoutes');\r\nconst courseRoutes = require('./src/routes/v1/courseRoutes');\r\nconst userRoutes = require('./src/routes/v1/userRoutes');\r\nconst productRoutes = require('./src/routes/v1/productRoutes');\r\nconst categoryRoutes = require('./src/routes/v1/categoryRoutes');\r\nconst bookingRoutes = require(\"./src/routes/v1/bookingRoutes\");\r\nconst dashboardRoutes = require(\"./src/routes/v1/dashboardRoutes\");\r\nconst superdealRoutes = require(\"./src/routes/v1/superdealRoutes\");\r\nconst purchaseRoutes = require(\"./src/routes/v1/purchaseRoutes\");\r\nconst scheduleRoutes = require('./src/routes/v1/scheduleRoutes');\r\nconst teacherRoutes = require('./src/routes/v1/teacherRoutes');\r\n\r\n// Content Security Policy\r\napp.use(\r\n    helmet.contentSecurityPolicy({\r\n        directives: {\r\n            defaultSrc: [\"'self'\"],\r\n            scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n            objectSrc: [\"'none'\"],\r\n            upgradeInsecureRequests: [],\r\n        },\r\n    })\r\n);\r\n\r\n// HTTP Strict Transport Security (HSTS)\r\napp.use(\r\n    helmet.hsts({\r\n        maxAge: 31536000, // 1 year\r\n        includeSubDomains: true,\r\n        preload: true,\r\n    })\r\n);\r\n\r\napp.use(\"/userImages\", express.static(__dirname + \"/userImages\"));\r\napp.use(\"/productImages\", express.static(__dirname + \"/productImages\"));\r\napp.use(\"/categoryImages\", express.static(__dirname + \"/categoryImages/\"));\r\napp.use(\"/superdealImages\", express.static(__dirname + \"/superdealImages\"));\r\napp.use(\"/bannerImages\", express.static(__dirname + \"/bannerImages\"));\r\napp.use(\"/courseImages\", express.static(__dirname + \"/courseImages\"));\r\napp.use(\"/class_pdf\", express.static(__dirname + \"/class_pdf\"));\r\n\r\n\r\napp.use(\"/\", adminRoutes);\r\napp.use(\"/\", courseRoutes);\r\napp.use(\"/\", userRoutes);\r\napp.use(\"/\", productRoutes);\r\napp.use(\"/\", categoryRoutes);\r\napp.use(\"/\", bookingRoutes);\r\napp.use(\"/\", dashboardRoutes);\r\napp.use(\"/\", superdealRoutes);\r\napp.use(\"/\", purchaseRoutes);\r\napp.use(\"/\", scheduleRoutes);\r\napp.use(\"/\", teacherRoutes);\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"<h1>Coaching App is Up and Running</h1>\");\r\n});\r\n\r\n// Last middleware if any error comes\r\napp.use(errorHandler);\r\n\r\nconst server = app.listen(port, async() => {\r\n    console.log('App is running on port', port);\r\n    // logger.info('Server started on port ' + port, { meta: { timestamp: new Date().toISOString() } });\r\n    await connectToDatabase;\r\n});\r\n\r\n// Handling unhandled promise rejections\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling uncaught exceptions\r\nprocess.on('uncaughtException', (err) => {\r\n    console.error('Uncaught Exception thrown:', err);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling process termination signals for graceful shutdown\r\nprocess.on('SIGTERM', () => {\r\n    console.log('SIGTERM signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});\r\n\r\nprocess.on('SIGINT', () => {\r\n    console.log('SIGINT signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});\r\n"],"names":["config","module","exports","mongoDbUrl","process","env","MONGO_DB_URL","logDbUrl","LOG_DB_URL","tokenSecretKey","JWT_SECRET","port","PORT","adminSecretKey","ADMIN_SECRET_KEY","mongoose","connect","maxPoolSize","connectToDatabase","connection","on","console","error","bind","once","log","winston","allowedTransports","push","transports","File","filename","logger","createLogger","format","combine","timestamp","printf","level","toUpperCase","message","meta","JSON","stringify","defaultMeta","service","adminModel","jwt","bcrypt","uuid","path","getCurrentIPAddress","generateRandomAlphaNumericID","userModel","bookingModel","createAdmin","async","req","res","name","email","password","mobile","body","status","send","profilePic","files","hash","currentIpAddress","profilePicPath","profilePicName","v4","split","pop","profilePicFullPath","picSavingPath","join","__dirname","mv","err","picObj","picName","picPath","adminObj","adminId","sessionToken","newAdmin","create","data","adminLogin","admin","findOne","compare","result","date","Date","now","issueTime","Math","floor","token","sign","_id","toString","iat","expiresIn","setHeader","save","hasAccess","getAllBookingsOfUser","userId","params","userAllBookings","find","getOneDayBookings","today","year","getFullYear","String","getMonth","padStart","getDate","oneDayBookings","BookingDate","grandTotal","booking","grand_total","totalBookings","oneDayRevenue","getOneWeekBookings","startDate","endDate","oneWeekAgo","getTime","startYear","oneWeekBookings","$gte","$lte","length","getOneMonthBookings","month","oneMonthBookings","createdAt","oneMonthRevenue","getOneYearBookings","oneYearBookings","oneYearRequests","oneYearRevenue","isValidObjectId","createBooking","f_name","l_name","address","apartment","city","state","state_code","countryCode","countryName","post_code","productList","CGST","SGST","TimeSlot","booking_status","totalProduct","total","products","productData","subTitle","bookingQty","category","description","discount","imgUrl","price","stock_items","subTotal","randomId","bookingId","isBookingAlreadyExist","str","random","bookingObj","newBooking","getAllSlotsOfADate","allBookings","timeSlotArr","bookedSlots","getUserAllBookings","user","allBookingsOfAUser","getAllBookings","key","getSpecificBooking","findById","updateBookingStatus","question","feedback","categoryModel","fs","productModel","addCategory","File_Extension","File_Path","File_data","File_name","FileUpload","decodedData","Buffer","from","categoryImgFolder","existsSync","mkdirSync","imgRelativePath","imgUniqName","imgFullUrl","imgSavingPath","writeFileSync","categoryObj","category_image","fileName","filePath","newCategory","metadata","stack","details","toISOString","ip","method","url","originalUrl","getCategoryById","categoryId","allProducts","getProductByKeywords","service_search","filter","$or","$regex","$options","getAllCategories","allCategories","updateCategory","reqBody","oldImgName","oldImgPath","unlinkSync","newImgObj","deleteCategory","deleteOne","classScheduleModel","createClassSchedule","courseId","meeting_link","teacherId","techer_name","input_text","youtube_video_code","imgObj","pdf_file","classPdfFolder","classData","pdf_upload_file","newSchedule","getAllClassSchedule","allClassSchedules","getSchedule","classSchedule","updateSchedule","s","e","deleteSchedule","pdf_file_name","pdf_file_path","courseModel","addCourse","category_name","course_name","course_fee","duration","start_date","end_date","class_time","course_seat_limit","offer_in_amount","coutse_type","courseImgFolder","course_image","courseData","newCourse","getAllCourses","allCourses","getCourseById","c","updateCourse","deleteCourse","coursePurchaseModel","purchaseCourse","amount","notes","purchaseData","newCouusePurchase","getPurchasedCourse","purchaseId","purchasedCourse","getAllPurchasedCourses","allPurchasedCourses","updatePurchasedCourseDetails","p","deletePurchaseDetails","superDealModel","bannerImageModel","getDashboard","categories","superdeals","myAllBookings","bannerImages","bannerObj","categoryList","superdealList","bookingList","updateBannerImages","ImageModel","parsedData","parse","bannerImage","index","isNewPick","img_id","imageName","newBannerObj","imagePath","oldImage","updatedBannerObj","deleteBannerImage","imageId","i","imgName","imgPath","arr","splice","superdealModel","addProduct","stock_item","newProduct","productObj","service_image","getProduct","productId","product","getAllProducts","updateProduct","superdeal","productOldImage","superdealOldImage","deleteProduct","productImgName","superdealImgName","addSuperDeal","dbObj","newDeal","getSuperdealById","superdealId","getAllSuperdeals","allSuperdeals","updateSuperdeal","deleteSuperdeal","superdealImgPath","teacherModel","addTeacher","teacherImgFolder","teacherData","newTeacher","getAllTeachers","allTeachers","getTeacherById","teacher","updateTeacher","t","deleteTeacher","deletedUserModel","authenticateUser","isUserExists","userObj","newUser","updateUser","phone","gender","date_of_birth","Address","education","deleteUser","reason","userData","jsonStr","deletedUserData","deletedAt","toLocaleString","getUserById","getAllUsers","users","BaseError","Error","constructor","statusCode","super","this","Authentication","next","tokenWithBearer","headers","decodedToken","verify","decode","loginUserId","Authorization","tokenId","AdminId","adminSchema","Schema","Types","ObjectId","type","timestamps","model","bannerImageSchema","default","bookingSchema","Number","enum","categorySchema","cat_enum","classScheduleSchema","courseSchema","ref","coursePurchaseSchema","deletedUserSchema","productSchema","superdealSchema","teacherSchema","userSchema","unique","required","trim","router","Router","post","get","put","delete","StatusCodes","errorHandler","json","success","INTERNAL_SERVER_ERROR","os","networkInterfaces","Object","values","flat","iface","family","internal","map","id","characters","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","express","bodyParser","fileUpload","cors","helmet","compression","mongoSanitize","hpp","app","use","limit","urlencoded","extended","text","adminRoutes","courseRoutes","userRoutes","productRoutes","categoryRoutes","bookingRoutes","dashboardRoutes","superdealRoutes","purchaseRoutes","scheduleRoutes","teacherRoutes","contentSecurityPolicy","directives","defaultSrc","scriptSrc","objectSrc","upgradeInsecureRequests","hsts","maxAge","includeSubDomains","preload","static","server","listen","promise","close","exit"],"sourceRoot":""}